Given a 2D array, find the maximum sum subarray in it

Example: 
Row=4, Column=5;

# Matrix:
[ [1  2 -1 -4 -20], 
[ -8 -3  4  2  1], 
[  3  8  10 1  3], 
[ -4 -1  1  7 -6] ]

Output : 29

Approach : Apply Kadanes Algorithm for Every Row :

                     Array       Tracking MaxSum
For Row 1:      1  2 -1  -4 -20       3
               -7 -1  3  -2 -19       3
               -4  7 13  -1 -16      20
               -8  6 14   6 -22      26    
For Row 2:
               -8 -3  4   2   1      26
               -5  5 14   3   4      26
               -9  4 15  10  -2      29
For Row 3:
                3  8 10   1   3      29
                -1 7 11   8  -3      29
For Row 4:      -4 -1 1   7  -6      29      

Implementation:

#include <iostream>
#include <vector>
using namespace std;

int solvekd(vector<int>& arr,int n)
{
    int curr_sum[n];
    curr_sum[0]=arr[0];
    int max_sum=arr[0];
    for(int i=1;i<n;i++)
    {
        curr_sum[i]=max(arr[i],curr_sum[i-1]+arr[i]);
        max_sum=max(max_sum,curr_sum[i]);
    }
    return max_sum;
}
int main() 
{
    int t;
    cin>>t;
    while(t--)
    {
        int r,c;
        cin>>r>>c;
        int mat[r][c];
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                cin>>mat[i][j];
            }
        }
        int ans=0;
        for(int i=0;i<r;i++)
        {
            vector<int>v(c,0);
            for(int j=i;j<r;j++)
            {
                for(int k=0;k<c;k++)
                {
                    v[k]+=mat[j][k];
                }
                ans=max(ans,solvekd(v,c));
            }
        }
        cout<<ans<<endl;
    }
	return 0;
}
