Given a bitonic sequence A of N distinct elements, write a program to find a given element B in the bitonic sequence in O(logN) time.

NOTE: A Bitonic Sequence is a sequence of numbers which is first strictly increasing then after a point strictly decreasing.

Example:


Input 1:
A = [3, 9, 10, 20, 17, 5, 1]
B = 20
Output : 3

Input 2:
A = [5, 6, 7, 8, 9, 10, 3, 2, 1]
B = 30
Output : -1

ALGORITHM :
---------------
Find Peak Element in array to divide the first half of Array in increasing order (Sorted Array) and second half in decreasing order (Reverse Sorted Array)
Call Binary Search of target on Sorted Array (first half of array)
Call Binary Search of target on Reverse Sorted Array (second half of array)

SOLUTION :
------------
int findPeakElement(vector<int>& nums) 
{
    int n=nums.size();
    if(n==1)return 0;
    int left=0,right=n-1;
    while(left<=right)
    {
        int mid=left+(right-left)/2;
        if(mid!=0 and mid!=n-1)
        {
            if(nums[mid]>nums[mid-1] and nums[mid]>nums[mid+1])return mid;
            else if(nums[mid-1]>nums[mid])right=mid-1;
            else left=mid+1;
        }
        else if(mid==0)
        {
            if(nums[0]>nums[1])return 0;
            else return 1;
        }
        else if(mid==n-1)
        {
            if(nums[n-1]>nums[n-2])return n-1;
            else return n-2;                
        }
    }
    return 0;
}
int searchInSorted(vector<int>& arr,int K,int left, int right) 
{
    //int left=0,right=N-1;
    while(left<=right)
    {
        int mid=left+(right-left)/2;
        if(arr[mid] == K)return mid;
        else if(arr[mid]>K)right=mid-1;
        else left=mid+1;
    }
    return -1;
       
}
int searchInReverseSorted(vector<int>& arr,int K,int left, int right) 
{
    //int left=0,right=N-1;
    while(left<=right)
    {
        int mid=left+(right-left)/2;
        if(arr[mid] == K)return mid;
        else if(arr[mid]>K)left=mid+1;
        else right=mid-1;
    }
    return -1;
       
}
int Solution::solve(vector<int> &A, int B) 
{
    int left=0,right=A.size()-1;
    int peak=findPeakElement(A);
    int x=searchInSorted(A,B,left,peak-1);
    int y=searchInReverseSorted(A,B,peak+1,right); 
    if(x==-1 and y==-1)return -1;
    else return max(x,y);
 
}
