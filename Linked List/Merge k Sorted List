You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

METHOD 1:(Using Merge 2 sorted linked list)
A Simple Solution is to initialize the result as the first list. Now traverse all lists starting from the second list. 
Insert every node of the currently traversed list into result in a sorted way.  
Time Complexity : O(N *K^2)
=> N+2N+3N+4N+5N+...........KN
=> N(1+2+3+4+5+..............K)
=> N K(K+1)/2 = O(N *K^2)

METHOD 2: (Using Min Heap)
Time Complexity : O(nk Log k)

SOLUTION : METHOD 2
--------------------
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) 
    {
        priority_queue<int,vector<int>,greater<int>> pq;
        ListNode* head=NULL;
        ListNode* tail=NULL;
        
        for(int i=0;i<lists.size();i++)
        {
            ListNode* temp=lists[i];
            while(temp!=NULL)
            {
                pq.push(temp->val);
                temp=temp->next;
            }
        }
        
        while(!pq.empty())
        {
            if(head==NULL)
            {
                head=tail=new ListNode(pq.top());
            }
            else 
            {
                ListNode* t=new ListNode(pq.top());
                tail->next=t;
                tail=tail->next;
            }
            pq.pop();
        }
        if(tail!=NULL)tail->next=NULL;
        
        return head;
        
        
    }
};
