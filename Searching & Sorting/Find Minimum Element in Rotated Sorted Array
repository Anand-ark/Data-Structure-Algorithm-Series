Suppose an array of length n sorted in ascending order is rotated between 1 and n times. 
For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

SOLUTION : TC-> O(log N)
-------------------------
class Solution {
public:
    
    int findMin(vector<int>& nums) 
    {
        int n=nums.size();
        int low=0;
        int high=n-1;
        while(low<=high)
        {
            //to check if array is already sorted
            if(nums[low]<=nums[high])return nums[low];            
            int mid=low+(high-low)/2;
            int prev=(mid+n-1)%n;
            int next=(mid+1)%n;
            if(nums[mid]<=nums[prev] && nums[mid]<=nums[next])
            {
                return nums[mid];
            }
            else if(nums[mid]>=nums[low])low=mid+1;
            else high=mid-1;
        }
        return -1;
    }
};
