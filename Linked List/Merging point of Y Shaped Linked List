There are two singly linked lists in a system. By some programming error, the end node of one of the linked list 
got linked to the second list, forming an inverted Y shaped list. Write a program to get the point where two linked list merge. 

METHOD 1: (Using Two Loops)
Use 2 nested for loops. The outer loop will be for each node of the 1st list and inner loop will be for 2nd list. 
In the inner loop, check if any of nodes of the 2nd list is same as the current node of the first linked list
Time Complexity : O(n * m) , Space Complexity : O(1)

METHOD 2: (Using Node Diff. Count)
Get count of the nodes in the first list, let count be c1.
Get count of the nodes in the second list, let count be c2.
Get the difference of counts d = abs(c1 â€“ c2)
Now traverse the bigger list from the first node till d nodes so that from here onwards both the lists have equal no of nodes 
Then we can traverse both the lists in parallel till we come across a common node. (Note that getting a common node is done by comparing the address of the nodes)
Time Complexity : O(n + m) , Space Complexity : O(1)

SOLUTION : METHOD 2
----------------------
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) 
    {
        ListNode *p1=headA,*p2=headB;
        int count1=0,count2=0;
        while(p1!=NULL)
        {
            count1++;
            p1=p1->next;
        }
        while(p2!=NULL)
        {
            count2++;
            p2=p2->next;
        }

        int diff=abs(count1-count2);
        
        p1=headA;
        p2=headB;
        if(count1>count2)
        {
            for(int i=0;i<diff;i++)p1=p1->next;
        }
        else
        {
            for(int i=0;i<diff;i++)p2=p2->next;
        }
        while(p1!=p2)
        {
            p1=p1->next;
            p2=p2->next;
        }
        return p1;

    }
};
