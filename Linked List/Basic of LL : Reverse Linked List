Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

METHOD 1:
Traverse the list and push all of its nodes onto a stack.
Traverse the list from the head node again and pop a value from the stack top and connect them in reverse order.
Time Complexity : O(N) , Space Complexity: O(N)

METHOD 2:
While you are traversing the list, change the current node's next pointer to point to its previous element. 
Since a node does not have reference to its previous node, you must store its previous element beforehand. 
You also need another pointer to store the next node before changing the reference. 
Time Complexity : O(N) , Space Complexity: O(1)

SOLUTION : METHOD 2
--------------------
class Solution {
public:
    ListNode* reverseList(ListNode* head) 
    {
        ListNode *prev=NULL,*curr=head,*nearest=NULL;
        while(curr!=NULL)
        {
            nearest=curr->next;
            curr->next=prev;
            prev=curr;
            curr=nearest;
        }
        return prev;
    }
};
