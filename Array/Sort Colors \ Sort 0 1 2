Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

Example 3:
Input: nums = [0]
Output: [0]


METHOD 1: (Simple Counting)
-----------------------------
Count the number of 0’s, 1’s and 2’s. After Counting, put all 0’s first, then 1’s and lastly 2’s in the array.
We traverse the array two times.
Time complexity : O(N), Space Complexity : O(1)

METHOD 2: (Dutch National Flag Algorithm)
-----------------------------------------
We traverse the array One times.
Time complexity : O(N), Space Complexity : O(1)

SOLUTION : METHOD 2
--------------------
class Solution {
public:
    void sortColors(vector<int>& nums) 
    {
        int left=0,mid=0,right=nums.size()-1;
        while(mid<=right)
        {
          if(nums[mid]==0) 
          {
              swap(nums[mid],nums[left]);
              left++,mid++;
          }
          else if(nums[mid]==1)
          {
              mid++;
          }
          else if(nums[mid]==2)
          {
              swap(nums[right],nums[mid]);
              right--;
          }
        }
        
    }
};
