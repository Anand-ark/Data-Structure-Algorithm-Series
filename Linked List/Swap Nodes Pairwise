Given a singly linked list, write a function to swap elements pairwise. 
For example, if the linked list is 1->2->3->4->5->6->7 then the function should change it to 2->1->4->3->6->5->7, and 
if the linked list is 1->2->3->4->5->6 then the function should change it to 2->1->4->3->6->5

METHOD 1 : (Changing data of node)

Note : The solution provided there swaps data of nodes. If data contains many fields, there will be many swap operations. 
So changing links is a better idea in general.

SOLUTION : 
-----------
void pairWiseSwap(Node* head)
{
    Node* temp = head;
 
    // Traverse further only if there are at-least two nodes left
    while (temp != NULL && temp->next != NULL) {
        //Swap data of node with its next node's data */
        swap(temp->data,temp->next->data);
 
        // Move temp by 2 for the next pair
        temp = temp->next->next;
    }
}

METHOD 2 : (Changing Links of Node)

SOLUTION :
-----------
class Solution {
public:
    ListNode* swapPairs(ListNode* head) 
    {
        if(head==NULL or head->next==NULL)return head;
        ListNode *prev=head,*curr=head->next;
        ListNode *res=curr;
        while(true)
        {
            ListNode *nextnode=curr->next;
            curr->next=prev;
            
            if(nextnode==NULL or nextnode->next==NULL)
            {
                prev->next=nextnode;
                break;
            }
            prev->next=nextnode->next;
            prev=nextnode;
            curr=prev->next;
        }
        return res;
    }
};
