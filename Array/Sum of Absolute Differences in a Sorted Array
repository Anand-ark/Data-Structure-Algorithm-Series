PROBLEM STATEMENT:
You are given an integer array nums sorted in non-decreasing order.
Build and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences 
between nums[i] and all the other elements in the array.
In other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).

Example 1:

Input: nums = [2,3,5]
Output: [4,3,5]
Explanation: Assuming the arrays are 0-indexed, then
result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,
result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,
result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.

Example 2:

Input: nums = [1,4,6,8,10]
Output: [24,15,13,15,21]

SOLUTION:

class Solution {
public:
    vector<int> getSumAbsoluteDifferences(vector<int>& nums) 
    {
        int n=nums.size();
        
        // prefix sum //
        vector<int>prefixsum(n,0);
        prefixsum[0]=nums[0];
        for(int i=1;i<n;i++)
        {
            prefixsum[i]=nums[i]+prefixsum[i-1];
        }
        
        // suffix sum //
        vector<int>suffixsum(n,0);
        suffixsum[n-1]=nums[n-1];
        for(int i=n-2;i>=0;i--)
        {
            suffixsum[i]=nums[i]+suffixsum[i+1];
        }
        
        // store absolute diff //
        vector<int>res(n,0);
        for(int i=0;i<n;i++)
        {
            if(i==0)
            {
                res[i]=abs(nums[i]*(n-1)-suffixsum[i+1]);
            }
            else if(i==n-1)
            {
                res[i]=abs(nums[i]*(n-1)-prefixsum[n-2]);
            }
            else
            {
                int a=nums[i]*i-prefixsum[i-1];
                int b=nums[i]*(n-1-i)-suffixsum[i+1];
                res[i]=abs(a-b);
            }
                           
        }
        return res;
    }
};
