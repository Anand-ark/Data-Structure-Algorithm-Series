PROBLEM STATEMENT:
We are given n-platform and two main running railway track for both direction. Trains which needs to stop at your station must occupy one platform 
for their stoppage and the trains which need not to stop at your station will run away through either of main track without stopping. 
Now, each train has three value first arrival time, second departure time and third required platform number. 
We are given m such trains you have to tell maximum number of train for which you can provide stoppage at your station.

Examples:

Input : n = 3, m = 6 
Train no.|  Arrival Time |Dept. Time | Platform No.
    1    |   10:00       |  10:30    |    1
    2    |   10:10       |  10:30    |    1
    3    |   10:00       |  10:20    |    2
    4    |   10:30       |  12:30    |    2
    5    |   12:00       |  12:30    |    3
    6    |   09:00       |  10:05    |    1
Output : Maximum Stopped Trains = 5
Explanation : If train no. 1 will left 
to go without stoppage then 2 and 6 can 
easily be accommodated on platform 1. 
And 3 and 4 on platform 2 and 5 on platform 3.

SOLUTION:

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define n 2 //number of platform
#define m 5 //number of train
typedef pair<int,int>pi;
bool cmp(pi a,pi b)
{
    return a.second<b.second;
}
int maxStop(int arr[m][3]) 
{
        vector<pi>v[n+1];
        for(int i=0;i<m;i++)v[arr[i][2]].push_back({arr[i][0],arr[i][1]});
        for(int i=1;i<=n;i++)sort(v[i].begin(),v[i].end(),cmp);
        int count=0;
        for(int i=1;i<=n;i++)
        {
            int last=0;
            for(int j=0;j<v[i].size();j++)
            {
                if(v[i][j].first>last)
                {
                    count++;
                    last=v[i][j].second;
                }
            }
        }
        return count;
}
int main() 
{ 
	int arr[m][3] = { 1000, 1030, 1, 
					1010, 1020, 1, 
					1025, 1040, 1, 
					1130, 1145, 2, 
					1130, 1140, 2 }; 
	cout <<maxStop(arr)<<endl;
	return 0; 
} 

