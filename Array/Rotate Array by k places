Given an array, rotate the array to the right by k steps, where k is non-negative.

 Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]


METHOD 1: 
The simplest approach is to rotate all the elements of the array in k steps by rotating the elements by 1 unit in each step. 
Time Complexity :  O(N*k) , Space Complexity : O(1)

METHOD 2: 
We use an extra array in which we place every element of the array at its correct position i.e. the number at index ii in the 
original array is placed at the index (i + k) % length of array. Then, we copy the new array to the original one.
Time Complexity :  O(N) , Space Complexity : O(N)

METHOD 3:
In this approach, we firstly reverse all the elements of the array. Then, reversing the first k elements followed by reversing 
the rest N-k elements gives us the required result.
Time Complexity :  O(N) , Space Complexity : O(1)

SOLUTION : METHOD 3 
class Solution {
public:
    void solve(vector<int>& nums,int left, int right)
    {
        int i=left;
        int j=right;
        while(i<nums.size() and j>i)
        {
            swap(nums[i],nums[j]);
            i++;
            j--;
        }
    }
    void rotate(vector<int>& nums, int k) 
    {
        k=k%nums.size();
        solve(nums,0,nums.size()-1);
        solve(nums,0,k-1);
        solve(nums,k,nums.size()-1);
        
    }
};


