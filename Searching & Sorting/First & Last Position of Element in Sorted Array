Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

SOLUTION :
-------------
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) 
    {
//------finding first occurence-------------//
        int left=0,right=nums.size()-1;
        int res=-1;
        vector<int>ans;
        while(left<=right)
        {
            int mid=(left+right)/2;
            if(nums[mid]==target)
            {
                res=mid;
                right=mid-1;
            }
            else if(nums[mid]<target)left=mid+1;
            else right=mid-1;
        }
        ans.push_back(res);
//-----finding last occurence---------------------//
        int l=0,r=nums.size()-1;
        int re=-1;
        
        while(l<=r)
        {
            int m=(l+r)/2;
            if(nums[m]==target)
            {
                re=m;
                l=m+1;
            }
            else if(nums[m]<target)l=m+1;
            else r=m-1;
        }
        ans.push_back(re);
        
        return ans;
    }
};
