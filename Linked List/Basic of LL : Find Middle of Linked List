Given a singly linked list, find the middle of the linked list. 
For example, if the given linked list is 1->2->3->4->5 then the output should be 3. 
If there are even nodes, then there would be two middle nodes, we need to print the second middle element. 
For example, if given linked list is 1->2->3->4->5->6 then the output should be 4. 

METHOD 1:
Put every node into an array A in order. Then the middle node is just A[A.length // 2], since we can retrieve each node by index.
Time Complexity : O(N) , Space Complexity : O(N)

METHOD 2:
When traversing the list with a pointer slow, make another pointer fast that traverses twice as fast. 
When fast reaches the end of the list, slow must be in the middle.
Time Complexity : O(N) , Space Complexity : O(1)

SOLUTION METHOD 2:
--------------------

int getMiddle(Node *head)
{
    Node *slow=head,*fast=head;
    while(fast!=NULL and fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow->data;
}
